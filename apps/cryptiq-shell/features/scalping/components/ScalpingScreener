import { useState, useEffect } from 'react'
import { useWebSocket } from '@/features/shared/hooks/useWebSocket'

interface ScalpingOpportunity {
  symbol: string
  price: number
  change24h: number
  volume: string
  volatility: number
  orderBookLevels: {
    bids: number
    asks: number
  }
  dexLiquidity?: {
    available: number
    routes: number
  }
}

export function ScalpingScreener() {
  const [opportunities, setOpportunities] = useState<ScalpingOpportunity[]>([])
  const [filter, setFilter] = useState('')
  const [sortBy, setSortBy] = useState<'volatility' | 'volume' | 'change'>('volatility')

  const { lastMessage } = useWebSocket({
    url: 'ws://your-price-feed/stream',
    onMessage: (data) => updateOpportunities(data)
  })

  return (
    <Card>
      <CardContent>
        <div className="flex justify-between items-center mb-4">
          <div className="space-x-2">
            <Input 
              placeholder="Search pairs..." 
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="w-64 bg-background"
            />
          </div>
          <div className="flex gap-2">
            <Badge variant={sortBy === 'volatility' ? 'default' : 'outline'}>
              Top Volatility
            </Badge>
            <Badge variant={sortBy === 'volume' ? 'default' : 'outline'}>
              Top Volume
            </Badge>
          </div>
        </div>

        <div className="grid grid-cols-7 gap-4 text-sm font-medium text-muted-foreground mb-2">
          <div>Pair</div>
          <div>Price</div>
          <div>Change 24h</div>
          <div>Volume</div>
          <div>Volatility</div>
          <div>Order Book</div>
          <div>DEX Routes</div>
        </div>

        <div className="space-y-1">
          {opportunities.map(opp => (
            <div 
              key={opp.symbol}
              className="grid grid-cols-7 gap-4 py-2 hover:bg-muted/50 rounded-md"
            >
              <div className="font-mono">{opp.symbol}</div>
              <div>${opp.price.toFixed(8)}</div>
              <div className={opp.change24h > 0 ? 'text-green-500' : 'text-red-500'}>
                {opp.change24h.toFixed(2)}%
              </div>
              <div>{opp.volume}</div>
              <div>{opp.volatility.toFixed(2)}%</div>
              <div className="flex gap-2">
                <span className="text-green-500">
                  {opp.orderBookLevels.bids}
                </span>
                /
                <span className="text-red-500">
                  {opp.orderBookLevels.asks}
                </span>
              </div>
              <div>
                {opp.dexLiquidity && (
                  <Badge variant="outline">
                    {opp.dexLiquidity.routes} routes
                  </Badge>
                )}
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  )
}